{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add response interceptor to handle image URLs\napi.interceptors.response.use(response => {\n  // Transform any imagePath to full URLs in the response data\n  if (response.data && Array.isArray(response.data)) {\n    response.data = response.data.map(item => ({\n      ...item,\n      imageUrl: item.imagePath ? `${API_BASE_URL}${item.imagePath}` : null\n    }));\n  } else if (response.data && response.data.imagePath) {\n    response.data.imageUrl = `${API_BASE_URL}${response.data.imagePath}`;\n  }\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\nexport const fetchPortfolioData = async () => {\n  try {\n    const [projectsRes, skillsRes] = await Promise.all([api.get('/api/projects'), api.get('/api/skills')]);\n    return {\n      projects: projectsRes.data,\n      skills: skillsRes.data\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error('API Error:', error);\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch portfolio data');\n  }\n};\n\n// Additional API functions\nexport const getProject = async id => {\n  try {\n    const response = await api.get(`/api/projects/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    console.error('API Error:', error);\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to fetch project');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","response","use","data","Array","isArray","map","item","imageUrl","imagePath","error","Promise","reject","fetchPortfolioData","projectsRes","skillsRes","all","get","projects","skills","_error$response","_error$response$data","console","Error","getProject","id","_error$response2","_error$response2$data"],"sources":["/Users/nilavan/Desktop/portfolio-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add response interceptor to handle image URLs\napi.interceptors.response.use(response => {\n  // Transform any imagePath to full URLs in the response data\n  if (response.data && Array.isArray(response.data)) {\n    response.data = response.data.map(item => ({\n      ...item,\n      imageUrl: item.imagePath ? `${API_BASE_URL}${item.imagePath}` : null\n    }));\n  } else if (response.data && response.data.imagePath) {\n    response.data.imageUrl = `${API_BASE_URL}${response.data.imagePath}`;\n  }\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\n\nexport const fetchPortfolioData = async () => {\n  try {\n    const [projectsRes, skillsRes] = await Promise.all([\n      api.get('/api/projects'),\n      api.get('/api/skills')\n    ]);\n    return {\n      projects: projectsRes.data,\n      skills: skillsRes.data\n    };\n  } catch (error) {\n    console.error('API Error:', error);\n    throw new Error(error.response?.data?.error || 'Failed to fetch portfolio data');\n  }\n};\n\n// Additional API functions\nexport const getProject = async (id) => {\n  try {\n    const response = await api.get(`/api/projects/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('API Error:', error);\n    throw new Error(error.response?.data?.error || 'Failed to fetch project');\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAACD,QAAQ,IAAI;EACxC;EACA,IAAIA,QAAQ,CAACE,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACJ,QAAQ,CAACE,IAAI,CAAC,EAAE;IACjDF,QAAQ,CAACE,IAAI,GAAGF,QAAQ,CAACE,IAAI,CAACG,GAAG,CAACC,IAAI,KAAK;MACzC,GAAGA,IAAI;MACPC,QAAQ,EAAED,IAAI,CAACE,SAAS,GAAG,GAAGlB,YAAY,GAAGgB,IAAI,CAACE,SAAS,EAAE,GAAG;IAClE,CAAC,CAAC,CAAC;EACL,CAAC,MAAM,IAAIR,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACM,SAAS,EAAE;IACnDR,QAAQ,CAACE,IAAI,CAACK,QAAQ,GAAG,GAAGjB,YAAY,GAAGU,QAAQ,CAACE,IAAI,CAACM,SAAS,EAAE;EACtE;EACA,OAAOR,QAAQ;AACjB,CAAC,EAAES,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,OAAO,MAAMG,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,MAAM,CAACC,WAAW,EAAEC,SAAS,CAAC,GAAG,MAAMJ,OAAO,CAACK,GAAG,CAAC,CACjDrB,GAAG,CAACsB,GAAG,CAAC,eAAe,CAAC,EACxBtB,GAAG,CAACsB,GAAG,CAAC,aAAa,CAAC,CACvB,CAAC;IACF,OAAO;MACLC,QAAQ,EAAEJ,WAAW,CAACX,IAAI;MAC1BgB,MAAM,EAAEJ,SAAS,CAACZ;IACpB,CAAC;EACH,CAAC,CAAC,OAAOO,KAAK,EAAE;IAAA,IAAAU,eAAA,EAAAC,oBAAA;IACdC,OAAO,CAACZ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAM,IAAIa,KAAK,CAAC,EAAAH,eAAA,GAAAV,KAAK,CAACT,QAAQ,cAAAmB,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBjB,IAAI,cAAAkB,oBAAA,uBAApBA,oBAAA,CAAsBX,KAAK,KAAI,gCAAgC,CAAC;EAClF;AACF,CAAC;;AAED;AACA,OAAO,MAAMc,UAAU,GAAG,MAAOC,EAAE,IAAK;EACtC,IAAI;IACF,MAAMxB,QAAQ,GAAG,MAAMN,GAAG,CAACsB,GAAG,CAAC,iBAAiBQ,EAAE,EAAE,CAAC;IACrD,OAAOxB,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;IAAA,IAAAgB,gBAAA,EAAAC,qBAAA;IACdL,OAAO,CAACZ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAM,IAAIa,KAAK,CAAC,EAAAG,gBAAA,GAAAhB,KAAK,CAACT,QAAQ,cAAAyB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBvB,IAAI,cAAAwB,qBAAA,uBAApBA,qBAAA,CAAsBjB,KAAK,KAAI,yBAAyB,CAAC;EAC3E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}